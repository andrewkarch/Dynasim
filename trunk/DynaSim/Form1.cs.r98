using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;

namespace DynaSim
{
    /// <summary>
    /// Primary GUI class.
    /// </summary>
    public partial class Form1 : Form
    {

        // Hey these comments don't get put into the documentation... LOlz let's use the summary feature!
        // Reader/Writer objects and associated variables
        //**************************************************
        public string outValue;
        private StreamWriter outFile;
        private bool outFileBool = false;
        private StreamReader inFile;

        //**************************************************

        /// <summary>
        /// Equation builder instance, "eb"
        /// </summary>
        EquationBuilder eb;
        /// <summary>
        /// Simulation Engine instance, "se"
        /// </summary>
        SimEngine se;

        /// <summary>
        /// GUI class constructor.
        /// </summary>
        public Form1()
        {
            InitializeComponent();
            eb = new EquationBuilder();
            se = new SimEngine();
        }

        /// <summary>
        /// Extract the current named variables for use in some combo-box interaction options.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void interactionsTabPage_Enter(object sender, EventArgs e)
        {
            errorProvider.Clear();
            List<string> namedVariablesAndConstants = new List<string>();
            //Use the input DataGridView to populate the interaction DataGridView, preserve existing interactions.
            string eq = "";
            if (!eb.BuildEquationFromDataGridView(this.dgvVariables, ref eq))
                MessageBox.Show("Invalid data in Graph tab DataGridView.");
            else
            {
                namedVariablesAndConstants.Clear();
                //first token of every line of eq goes into:
                //cmbInteractionsPageToInteract
                //cmbInteractionsPageToInteractWith
                //cmbInteractionsPageToInteractWithViaConstant
                //and the combo box at index 1 in the DataGridView.
                string[] tokens = eq.Split();
                foreach (string s in tokens)
                {
                    double re;
                    if (! Double.TryParse(s, out re) && !String.IsNullOrWhiteSpace(s))
                    {
                        namedVariablesAndConstants.Add(s.ToLower());
                    }
                }
                cmbInteractionsPageToInteract.DataSource = new List<string>(namedVariablesAndConstants);
                cmbInteractionsPageToInteractWith.DataSource = new List<string>(namedVariablesAndConstants);
                cmbInteractionsPageToInteractWithViaConstant.DataSource = new List<string>(namedVariablesAndConstants);
            }
        }
        
        /// <summary>
        /// Swap graph values to table if simulation is running.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tableTabPage_Enter(object sender, EventArgs e)
        {
            int rowCount = dgvVariables.RowCount - 1; ;
            int rowParser = 0;
            while  (rowParser < rowCount) 
            {
                string value = dgvVariables.Rows[rowParser].Cells[0].Value.ToString();
                DataGridViewColumn col = new DataGridViewTextBoxColumn();
                col.HeaderText = value;
                int colIndex = dgvTable.Columns.Add(col);
                rowParser++;
            }
        }

        /// <summary>
        /// Return graph values back to graph view upon exit.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tableTabPage_Leave(object sender, EventArgs e)
        {
            dgvTable.Columns.Clear();
            DataGridViewColumn col = new DataGridViewTextBoxColumn();
            col.HeaderText = "Time";
            int colIndex = dgvTable.Columns.Add(col);
        }

        /// <summary>
        /// Attempts to start the simulation using the input data on the GUI.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnGraphTabPlay_Click(object sender, EventArgs e)
        {
            string eq = "";
            if (eb.BuildEquationFromDataGridView(this.dgvVariables, ref eq)
                && eb.BuildEquationFromDataGridView(this.dgvInteractions, ref eq))
            {
                // Send to sim engine (if the data is good from both datagridviews).
                se.InitMath(eq);
                se.WorkFunction();
            }
        }

        /// <summary>
        /// Validate and add an interaction to the interaction datagridview.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnInteractionsPageAddVariableInteraction_Click(object sender, EventArgs e)
        {
            // Clears errors and rechecks for them when button is clicked.
            errorProvider.Clear();

            try
            {
                if (sender == this.btnInteractionsPageAddVariableInteraction)
                {
                    // Check for no selection.
                    CheckForNoSelection(cmbInteractionsPageToInteract);
                    CheckForNoSelection(cmbInteractionsPageToInteractWith);
                    CheckForNoSelection(cmbInteractionsPageIntermediateUnit);

                    // Check operation input box.
                    CheckInteractionOperation(txtInteractionsPageEffectOnQuantity);

                    // If no exception thrown at this point, continue adding the interaction.
                    this.dgvInteractions.Rows.Add(cmbInteractionsPageToInteract.SelectedValue,
                        cmbInteractionsPageToInteractWith.SelectedValue, txtInteractionsPageEffectOnQuantity.Text);
                }
                else if (sender == this.btnInteractionsPageAddConstantInteraction)
                {
                    // Check for no selection.
                    CheckForNoSelection(txtInteractionsPageConstantName);
                    CheckForNoSelection(cmbInteractionsPageToInteractWithViaConstant);
                    CheckForNoSelection(cmbInteractionsPageIntermediateUnitConstant);

                    // Check operation input box.
                    CheckInteractionOperation(txtInteractionsPageConstantEffectOnQuantity);

                    // If no exception thrown at this point, continue adding the interaction.
                    this.dgvInteractions.Rows.Add(txtInteractionsPageConstantName.Text + Constants.CONSTANT_ID,
                        cmbInteractionsPageToInteractWithViaConstant.SelectedValue,
                        txtInteractionsPageConstantEffectOnQuantity.Text);
                }
            }
            catch
            {

            }
            
        }

        /// <summary>
        /// Ensure an operator is present and the value is numeric.
        /// </summary>
        /// <param name="text"></param>
        private void CheckInteractionOperation(Control text)
        {
            CheckForNoSelection(text);
            //Strip off a copy of the first character, find it in the acceptable operator string.
            char beg = text.Text[0];
            if (!Constants.AcceptableOperators.Contains(beg))
            {
                errorProvider.SetError(text, "Not a valid operator.");
                throw new Exception("Invalid operator exception.");
            }

            //Ensure the rest of the string is numeric.
            string num = text.Text.Substring(1);
            foreach (char c in num)
            {
                if (!Char.IsDigit(c) && c != '.')
                {
                    errorProvider.SetError(text, "Fix your effect value.");
                    throw new Exception("Invalid effect value exception.");
                }
            }
        }

        /// <summary>
        /// Ensure a selection is made, if not set the error provider.
        /// </summary>
        /// <param name="cbx">a combobox or textbox control</param>
        private void CheckForNoSelection(Control cbx)
        {
            if (String.IsNullOrWhiteSpace(cbx.Text) || String.IsNullOrEmpty(cbx.Text) )
            {
                errorProvider.SetError(cbx, "Please select a variable.");
                //throw new Exception("No selection exception.");
            }
        }

       /// <summary>
       /// Allow user to load a system via menu-strip option
       /// </summary>
       /// <param name="sender"></param>
       /// <param name="e"></param>
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openFileDialog1.ShowDialog();

            //string inValue;
            try
            {
                using (inFile = new StreamReader(openFileDialog1.FileName))
                {

                    /* while((inValue = inFile.Readline()) != null){
                        read data line by line and place where we need them
                       }
                     */
                }
            }
            catch
            {
                MessageBox.Show("File failed to open!","Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            inFile.Close();
        }

        /// <summary>
        /// Allow user to save a system via menu-strip option. Provides a typical Windows saving interface.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveAs_Click(object sender, EventArgs e)
        {
            saveFileDialog1.ShowDialog();
            //When we save the data would could append all of our needed save vales to a string split it
            //then read from an array. I'm sure there is an easier way however.
            //(outValue declared outside this scope
            //string[] dataArray = outValue.Split();
           
            try
            {
                using (outFile = new StreamWriter(saveFileDialog1.FileName, false))
                {
                    //outFile.WriteLine(get information from GUI);
                }
            }
            catch(DirectoryNotFoundException)
            {
                MessageBox.Show("Invalid Directory", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }



            outFileBool = true;
        }

        /// <summary>
        /// Allows user to save via save button, but doesn't open the Save As dialog feature
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSave_Click(object sender, EventArgs e)
        {
            //When we save the data would could append all of our needed save vales to a string split it
            //then read from an array. I'm sure there is an easier way however.
            //(outValue declared outside this scope
            //string[] dataArray = outValue.Split();
            if (outFileBool == false)
            {
                btnSaveAs_Click(sender, e);
            }
            else
            {
                try
                {
                    using (outFile = new StreamWriter(saveFileDialog1.FileName, false))
                    {
                        //outFile.WriteLine(get the information from the gui);
                    }
                }
                catch
                {
                    MessageBox.Show("File was not saved!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }

        }

        /// <summary>
        /// Exits the applicaton and closes both the inFile and outFile objects prior to close
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void exitToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            try
            {

             outFile.Close();
            }
            catch
            {
                MessageBox.Show("Error", "File did not close properly!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            Environment.Exit(0);
            //this.Close();
        }

    }
}
