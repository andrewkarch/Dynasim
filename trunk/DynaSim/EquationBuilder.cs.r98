using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;


namespace DynaSim
{
    /// <summary>
    /// Equation Builder Class, typically takes input from the datagridview and
    /// makes it usable.
    /// </summary>
    public class EquationBuilder
    {

        /// <summary>
        /// Builds an equation from the datagridview(s).
        /// </summary>
        /// <param name="dgv">DataGridView with 3 or 5 columns.</param>
        /// <param name="equation">Equation, out</param>
        /// <returns>true on success</returns>
        public bool BuildEquationFromDataGridView(DataGridView dgv, ref string equation)
        {
            if (dgv == null || equation == null)
                throw new ArgumentNullException("dgv It's Karch's fault.", "DataGridView dgv is null.");

            //A very nicely non-reusable method.
            if (dgv.Columns.Count == Constants.VARIABLE_COL_COUNT || dgv.Columns.Count == Constants.INTERACT_COL_COUNT)
            {
                for (int i = 0; i < dgv.Rows.Count-1; i++)
                {
                    for (int j = 0; j < dgv.Rows[i].Cells.Count; j++)
                    {
                        if (String.IsNullOrEmpty(dgv.Rows[i].Cells[j].Value as string)
                            || String.IsNullOrWhiteSpace(dgv.Rows[i].Cells[j].Value as string))
                        {
                            return false;
                        }
                        dgv.Rows[i].Cells[j].Value = (dgv.Rows[i].Cells[j].Value as string).ToLower();
                        equation += dgv.Rows[i].Cells[j].Value + " ";
                    }
                    equation += "\n"; // VERY IMPORTANT THIS IS CONSISTENT HERE AND IN THE SIM ENGINE.
                }
                return true;
            }
            return false;
        }
    }
}
